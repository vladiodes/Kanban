using System;
using System.Collections.Generic;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using log4net;
using IntroSE.Kanban.Backend.DataAccessLayer.DalObjects;

namespace IntroSE.Kanban.Backend.DataAccessLayer.DalControllers
{
    class TaskDalController : DalController
    {
        private static readonly log4net.ILog log = log4net.LogManager.GetLogger("TaskDalController");

        public const string tasksTable = "TasksTable";

        /// <summary>
        /// Simple constructor
        /// </summary>
        public TaskDalController() : base(tasksTable)
        {

        }

        /// <summary>
        /// Selecting all tasks belonging to a certain column
        /// </summary>
        /// <param name="ColumnID">The column id we're looking its tasks</param>
        /// <returns>A list of all tasks belonging to a wanted column</returns>
        public List<TaskDAL> SelectTasksByColID(long ColumnID)
        {
            List<DalObject> tasks = new List<DalObject>();
            using (var connection = new SQLiteConnection(_connectionString))
            {
                SQLiteCommand command = new SQLiteCommand(null, connection);
                command.CommandText = $"SELECT * FROM {tasksTable} WHERE {TaskDAL.TaskColumnIdColumn}={ColumnID};";
                SQLiteDataReader dataReader = null;
                try
                {
                    connection.Open();
                    dataReader = command.ExecuteReader();

                    while (dataReader.Read())
                    {
                        tasks.Add(ConvertReaderToObject(dataReader));

                    }
                }
                catch(Exception e)
                {
                    log.Error($"Failed to get all tasks of columnid {ColumnID}");
                }
                finally
                {
                    if (dataReader != null)
                    {
                        dataReader.Close();
                    }

                    command.Dispose();
                    connection.Close();
                }

            }
            return tasks.Cast<TaskDAL>().ToList();
        }

        /// <summary>
        /// Inserts a task to the db
        /// </summary>
        /// <param name="dalObject"></param>
        /// <returns>The id generated by the database</returns>
        public override long Insert(DalObject dalObject)
        {

            using (var connection = new SQLiteConnection(_connectionString))
            {
                TaskDAL task = (TaskDAL)dalObject;
                long output = -1;
                SQLiteCommand command = new SQLiteCommand(null, connection);
                SQLiteDataReader dataReader = null;
                try
                {
                    connection.Open();
                    command.CommandText = $"INSERT INTO {tasksTable} ({TaskDAL.TaskTitleColumn} ,{TaskDAL.TaskCreationTimeColumn} ,{TaskDAL.TaskDueDateColumn} ,{TaskDAL.TaskDescriptionColumn},{TaskDAL.TaskColumnIdColumn},{TaskDAL.TaskAssigneeColumn}) " +
                        $"VALUES (@TitleVal,@CreationVal,@DueVal,@DescVal,@colIdVal,@assigneeIdVal); SELECT {DalController.seqCol} FROM {DalController.SqlSeq} WHERE {DalController.seqName}='{tasksTable}';";

                    SQLiteParameter TitleParam = new SQLiteParameter(@"TitleVal", task.Title);
                    SQLiteParameter CreationParam = new SQLiteParameter(@"CreationVal", task.CreationTime);
                    SQLiteParameter DueDateParam = new SQLiteParameter(@"DueVal", task.DueDate);
                    SQLiteParameter DescParam = new SQLiteParameter(@"DescVal", task.Description);
                    SQLiteParameter colIdParam = new SQLiteParameter(@"colIdVal", task.ColumnID);
                    SQLiteParameter assigneeParam = new SQLiteParameter(@"assigneeIdVal", task.AssigneeID);


                    command.Parameters.Add(TitleParam);
                    command.Parameters.Add(CreationParam);
                    command.Parameters.Add(DueDateParam);
                    command.Parameters.Add(DescParam);
                    command.Parameters.Add(colIdParam);
                    command.Parameters.Add(assigneeParam);
                    dataReader = command.ExecuteReader();

                    if (dataReader.Read())
                    {
                        output = (long)dataReader.GetValue(0);
                    }

                }
                catch (Exception e)
                {
                    log.Error($"Failed to insert task to database{task.Title}", e);
                }
                finally
                {
                    if (dataReader != null)
                        dataReader.Close();
                    command.Dispose();
                    connection.Close();
                }
                return output;
            }
        }

        /// <summary>
        /// Converts an object in the reader to a taskDal
        /// </summary>
        /// <param name="reader"></param>
        /// <returns>the converted object</returns>
        protected override DalObject ConvertReaderToObject(SQLiteDataReader reader)
        {
            TaskDAL task = new TaskDAL((long)reader.GetValue(0), reader.GetString(1), reader.GetString(2), reader.GetString(3), reader.GetString(4), (long)reader.GetValue(5), (long)reader.GetValue(6));
            return task;
        }

    }
}
